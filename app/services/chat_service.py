"""Chat service for message processing"""

import time

import structlog

from app.utils.mock_data import MockDataGenerator

logger = structlog.get_logger()


class ChatService:
    """Service for handling chat message logic"""

    def __init__(self):
        self.data_generator = MockDataGenerator()

    def process_message(self, message: str, delay: float = 1.5) -> dict:
        """
        Process incoming chat message and generate response

        Args:
            message: User message
            delay: Network delay simulation

        Returns:
            Dictionary with response and workspace data
        """
        logger.debug("processing_message", message_length=len(message))
        time.sleep(delay)

        message_lower = message.lower()

        # Checklist keywords
        if any(
            keyword in message_lower
            for keyword in ["—Å–ø–∏—Å–æ–∫", "–¥–µ–ª", "–∑–∞–¥–∞—á", "–ø–µ—Ä–µ–µ–∑–¥", "—Å—á—ë—Ç", "–±–∞–Ω–∫"]
        ):
            logger.info("generated_response", response_type="checklist")
            return {
                "response": "üöÄ [BACKEND RESPONSE] –Ø –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª –¥–ª—è –≤–∞—Å —á–µ–∫-–ª–∏—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–¥–∞—á –ø–æ—Å–ª–µ –ø–µ—Ä–µ–µ–∑–¥–∞ (—Å –ª—é–±–æ–≤—å—é –æ—Ç FastAPI üêç). –í –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –∏ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—É–Ω–∫—Ç –ø—Ä–æ –ø–∏—Ç–æ–Ω–∞!",
                "workspace": {
                    "type": "checklist",
                    "data": self.data_generator.generate_checklist(),
                },
            }

        # Map/route keywords
        if any(keyword in message_lower for keyword in ["–º–∞—Ä—à—Ä—É—Ç", "–ø—Ä–æ–≥—É–ª–∫", "–¥–æ—Å—É–≥", "–∫–∞—Ä—Ç"]):
            logger.info("generated_response", response_type="map")
            return {
                "response": "üöÄ [BACKEND RESPONSE] –Ø —Å–æ—Å—Ç–∞–≤–∏–ª –¥–ª—è –≤–∞—Å –ø–µ—à–µ—Ö–æ–¥–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –Ω–∞ 2 —á–∞—Å–∞ –ø–æ —Ü–µ–Ω—Ç—Ä—É –ú—é–Ω—Ö–µ–Ω–∞ (—ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ –æ—Ç –±—ç–∫–µ–Ω–¥-—Å–µ—Ä–≤–µ—Ä–∞! ‚ö°). –ù–∞ –∫–∞—Ä—Ç–µ —Å–ø—Ä–∞–≤–∞ –æ—Ç–º–µ—á–µ–Ω—ã –≤—Å–µ –ß–ï–¢–´–†–ï —Ç–æ—á–∫–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞, –≤–∫–ª—é—á–∞—è —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ Python Cafe. –ü—Ä–∏—è—Ç–Ω–æ–π –ø—Ä–æ–≥—É–ª–∫–∏!",
                "workspace": {"type": "map", "data": self.data_generator.generate_map()},
            }

        # Default response
        logger.info("generated_response", response_type="default")
        return {
            "response": "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±—ç–∫–µ–Ω–¥ –Ω–∞ FastAPI üêç, –∏ —è –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π –¥–µ–ª –ø–æ—Å–ª–µ –ø–µ—Ä–µ–µ–∑–¥–∞ –∏–ª–∏ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≥—É–ª–∫–∏. –ß—Ç–æ –≤–∞—Å –±–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? (P.S. –ï—Å–ª–∏ –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–Ω–∞—á–∏—Ç –≤—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ backend —Å–µ—Ä–≤–µ—Ä—É!)",
            "workspace": {"type": "empty"},
        }
