name: Pull Request Checks

# Run ONLY on pull requests (not on direct push to main)
on:
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened, ready_for_review]

# Cancel in-progress runs when new commits are pushed
concurrency:
  group: pr-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  # Quick validation (runs first)
  validate:
    name: Quick Validation
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis

      - name: Validate PR title
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          types: |
            feat
            fix
            docs
            style
            refactor
            perf
            test
            build
            ci
            chore

      - name: Check for merge conflicts
        run: |
          git fetch origin ${{ github.base_ref }}
          if ! git merge-base --is-ancestor origin/${{ github.base_ref }} HEAD; then
            echo "✅ No merge conflicts detected"
          fi

  # Code quality checks
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Ruff linter
        run: |
          echo "🔍 Running Ruff linter..."
          ruff check app/ --output-format=github

      - name: Run Ruff formatter check
        run: |
          echo "🎨 Checking code formatting..."
          ruff format --check app/

      - name: Check for print statements (should use logger)
        run: |
          echo "🔍 Checking for print() statements..."
          if grep -r "print(" app/ --exclude-dir=__pycache__ --include="*.py"; then
            echo "❌ Found print() statements. Use logger instead!"
            exit 1
          else
            echo "✅ No print() statements found"
          fi

  # Pre-commit hooks (all checks)
  pre-commit:
    name: Pre-commit Hooks
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          cache: "pip"

      - name: Install pre-commit
        run: pip install pre-commit

      - name: Cache pre-commit hooks
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Run pre-commit
        run: pre-commit run --all-files --show-diff-on-failure

  # Security checks
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install security tools
        run: |
          pip install bandit[toml] safety

      - name: Run Bandit (security linter)
        run: |
          echo "🔒 Running security checks..."
          bandit -r app/ -lll -f json -o bandit-report.json || true
          bandit -r app/ -lll

      - name: Run Safety (dependency vulnerabilities)
        run: |
          echo "🔍 Checking dependencies for vulnerabilities..."
          safety check --json || true
          safety check

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports-pr-${{ github.event.pull_request.number }}
          path: bandit-report.json

  # Build and test
  build:
    name: Build & Test (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    needs: [code-quality, pre-commit]
    strategy:
      matrix:
        python-version: ["3.11", "3.12", "3.13"]
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Check imports
        run: |
          echo "📦 Testing application imports..."
          python -c "from app.main import app; print('✅ Application imports successful')"

      - name: Start server (smoke test)
        run: |
          echo "🚀 Testing server startup..."
          timeout 10s python run.py || code=$?
          if [ $code -eq 124 ]; then
            echo "✅ Server started successfully"
            exit 0
          else
            echo "❌ Server failed to start"
            exit 1
          fi

  # Docker build test
  docker:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [code-quality, pre-commit]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          load: true
          tags: city-helper-backend:pr-${{ github.event.pull_request.number }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          echo "🐳 Testing Docker image..."
          docker run -d --name test-backend \
            -e APP_ENV=local \
            -p 3001:3001 \
            city-helper-backend:pr-${{ github.event.pull_request.number }}

          # Wait for startup
          echo "⏳ Waiting for server to start..."
          sleep 15

          # Test health endpoint
          echo "🔍 Testing health endpoint..."
          curl -f http://localhost:3001/health || exit 1

          echo "✅ Docker image works correctly"

          # Cleanup
          docker stop test-backend
          docker rm test-backend

  # Final summary (all checks passed)
  all-checks-passed:
    name: All Checks Passed ✅
    runs-on: ubuntu-latest
    needs: [validate, code-quality, pre-commit, security, build, docker]
    if: success()
    steps:
      - name: Summary
        run: |
          echo "## ✅ All PR checks passed! 🎉" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "This PR is ready for review and merge." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Checks completed:" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Code quality (Ruff)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Pre-commit hooks" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Security scan" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Build & test (Python 3.11, 3.12, 3.13)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Docker build test" >> $GITHUB_STEP_SUMMARY

  # If any check fails
  checks-failed:
    name: Some Checks Failed ❌
    runs-on: ubuntu-latest
    needs: [validate, code-quality, pre-commit, security, build, docker]
    if: failure()
    steps:
      - name: Summary
        run: |
          echo "## ❌ Some checks failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Please review the failed jobs above and fix the issues." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Common fixes:" >> $GITHUB_STEP_SUMMARY
          echo "- Run \`make fix\` to auto-fix formatting" >> $GITHUB_STEP_SUMMARY
          echo "- Run \`make run-hooks\` to check pre-commit locally" >> $GITHUB_STEP_SUMMARY
          echo "- Check security reports in Artifacts" >> $GITHUB_STEP_SUMMARY
